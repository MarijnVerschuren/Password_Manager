# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_lib
else:
    import _py_lib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


AESKeyLength_AES_128 = _py_lib.AESKeyLength_AES_128
AESKeyLength_AES_192 = _py_lib.AESKeyLength_AES_192
AESKeyLength_AES_256 = _py_lib.AESKeyLength_AES_256
class AES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_lib.AES_swiginit(self, _py_lib.new_AES(*args))

    def EncryptECB(self, *args):
        return _py_lib.AES_EncryptECB(self, *args)

    def DecryptECB(self, *args):
        return _py_lib.AES_DecryptECB(self, *args)

    def EncryptCBC(self, *args):
        return _py_lib.AES_EncryptCBC(self, *args)

    def DecryptCBC(self, *args):
        return _py_lib.AES_DecryptCBC(self, *args)

    def EncryptCFB(self, *args):
        return _py_lib.AES_EncryptCFB(self, *args)

    def DecryptCFB(self, *args):
        return _py_lib.AES_DecryptCFB(self, *args)

    def printHexArray(self, a, n):
        return _py_lib.AES_printHexArray(self, a, n)

    def printHexVector(self, a):
        return _py_lib.AES_printHexVector(self, a)
    __swig_destroy__ = _py_lib.delete_AES

# Register AES in _py_lib:
_py_lib.AES_swigregister(AES)

class buffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _py_lib.buffer_swiginit(self, _py_lib.new_buffer(nelements))
    __swig_destroy__ = _py_lib.delete_buffer

    def __getitem__(self, index):
        return _py_lib.buffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _py_lib.buffer___setitem__(self, index, value)

    def cast(self):
        return _py_lib.buffer_cast(self)

    @staticmethod
    def frompointer(t):
        return _py_lib.buffer_frompointer(t)

# Register buffer in _py_lib:
_py_lib.buffer_swigregister(buffer)
cvar = _py_lib.cvar
sbox = cvar.sbox
inv_sbox = cvar.inv_sbox
GF_MUL_TABLE = cvar.GF_MUL_TABLE
CMDS = cvar.CMDS
INV_CMDS = cvar.INV_CMDS

def buffer_frompointer(t):
    return _py_lib.buffer_frompointer(t)

class Hash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _py_lib.Hash___call__(self, *args)

    def add(self, *args):
        return _py_lib.Hash_add(self, *args)

    def get_hash(self):
        return _py_lib.Hash_get_hash(self)

    def reset(self):
        return _py_lib.Hash_reset(self)
    __swig_destroy__ = _py_lib.delete_Hash

# Register Hash in _py_lib:
_py_lib.Hash_swigregister(Hash)

class SHA256(Hash):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BlockSize = _py_lib.SHA256_BlockSize
    HashBytes = _py_lib.SHA256_HashBytes

    def __init__(self):
        _py_lib.SHA256_swiginit(self, _py_lib.new_SHA256())

    def __call__(self, *args):
        return _py_lib.SHA256___call__(self, *args)

    def add(self, *args):
        return _py_lib.SHA256_add(self, *args)

    def get_hash(self):
        return _py_lib.SHA256_get_hash(self)

    def get_raw_hash(self):
        return _py_lib.SHA256_get_raw_hash(self)

    def reset(self):
        return _py_lib.SHA256_reset(self)
    __swig_destroy__ = _py_lib.delete_SHA256

# Register SHA256 in _py_lib:
_py_lib.SHA256_swigregister(SHA256)

CON_BACKSPACE = _py_lib.CON_BACKSPACE
CON_RETURN = _py_lib.CON_RETURN

def getpass(*args):
    return _py_lib.getpass(*args)


